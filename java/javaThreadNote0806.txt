一、java实现线程的第一种方法
	1、实现线程的第一种方法【继承Thread】，run是线程的执行体【run方法的方法体就代表了线程需要完成的任务】
	2、创建线程的子类即实现了线程的创建
	3、调用线程的start方法来启动线程
	【代码实例】
	package cn.icbrains.thread;
		import org.junit.Test;

		/**
		 * Created by icbrains on 2017/8/6.
		 * 创建线程
		 */
		public class ThreadTest01 extends Thread
		{
			@Override
			public void run() {
				for (int i=0; i<100;i++){
				System.out.println("当前线程Name--> "+getName());
				}

			}

			@Test
			public void test(){
				for (int i=0;i<100;i++){
					System.out.println("test方法中的当前线程的Name-->"+Thread.currentThread().getName());

					if (i==20){
						//创建一个线程
						new ThreadTest01().start();
						new ThreadTest01().start();
						new ThreadTest01().start();
					}
				}
			}
		}
二、java实现线程的第二种方法【实现Runnable】
	1、实现Runnable的接口，重写run方法，作为线程的执行体
	2、创建Runnable实现类的实例作为Thread的Target对象
	【代码实例】
		package cn.icbrains.thread;

		import org.junit.Test;

		/**
		 * Created by icbrains on 2017/8/6.
		 */
		public class ThreadTest02 implements Runnable{

			@Override
			public void run() {
				for (int i=0;i<100;i++){
					System.out.println("当前的线程Name-->"+Thread.currentThread().getName());
				}
			}

			//使用junit4测试
			@Test
			public void test02(){
				for (int i=0;i<100;i++){
					System.out.println("main方法线程-->"+Thread.currentThread().getName()+" "+i);
					if (i==20){
						ThreadTest02 test02=new ThreadTest02();
						//实现Runnable接口的类对象最为Thread的Target，第二个参数可以指定线程的名称
						new Thread(test02,"线程1").start();
						new Thread(test02,"线程2").start();
						new Thread(test02,"线程3").start();
					}
				}

			}
		}
三、使用Callable和Future创建线程
	1、Callable是一个函数式接口，可以使用Lambda 表达式，作为Thread的Target
	2、FutureTask类实现类Callable，Future
	【代码实例】
	package cn.icbrains.thread;

	import org.junit.Test;

	import java.util.concurrent.Callable;
	import java.util.concurrent.FutureTask;

	/**
	 * Created by icbrains on 2017/8/6.
	 */
	public class ThreadTest03 {

		//使用junit4作为单元测试工具
		@Test
		public void test03(){
			ThreadTest03 test03=new ThreadTest03();
			FutureTask task=new FutureTask<Integer>((Callable<Integer>)()->{
				int i=0;
				for ( ; i<100; i++){
					System.out.println("当前线程Name-->"+Thread.currentThread().getName());
				}
				return i;
			});

			for (int i=0; i<100; i++){
				System.out.println(Thread.currentThread().getName()+"变量i"+i);
				if (i==20){
					new Thread(task,"有返回值的线程1").start();
					new Thread(task,"有返回值的线程2").start();
				}
			}

			try{
				System.out.println("子线程的返回值"+task.get());
			}catch (Exception e){
				System.err.println(e.getMessage());
			}

		}
	}
四、三种创建线程的优缺点
	1)Runnable、Callable
		1、是以实现接口的方式，还可以继承其他的类
		2、多个线程可以共享一个Target，非常适合处理多个相同的线程体处理同一份资源的情况
		3、劣势是当访问当前线程的时候，必须使用Thread.currentThread().getName();
	2)Thread
		1、继承了Thread。所以不能继承其他的类
		2、优势是访问当前线程时只需要this就可以，【this.getName()】
五、线程的生命周期
	1、线程的五种状态【新建(New)、就绪(Runnable)、运行(Running)、阻塞(Blocked)、死亡(Dead)】
	2、线程的运行和阻塞状态
		【运行】表示就绪状态的线程获得了处理器(CPU)的资源，
		【阻塞】表示处于运行状态的线程通过一定的方式失去CPU资源，这些方式包括：调用sleep()、线程调用了一个阻塞式IO方法，线程试图获得一个同步监视器，但是该监视器被其他的线程持有
			线程等待某个通知(notify)，程序调用了线程的suspend()方法将线程挂起，yield（）【线程让步，但是此方法不会让线程处于阻塞状态，只是将线程回归就绪状态】
	3、线程的终止
		run和call的方法执行完成，线程正常结束
		程序抛出一个未处理的异常或者ERROR
		直接调用线程的stop方法
六、控制线程join()，当当前线程调用join方法时，必须等待join体的线程完成之后才可以继续执行
七、改变线程的优先级
	线程的优先级设置可以让线程获得不同的执行机会，Thread提供了setPriority(),参数有Thread.MAX_PRIORITY[10],Thread.MIN_PRIORITY[1] 、Thread.NORM_PRIORITY[5]
八、线程的同步
	当几个线程访问同一个对象的时候，需要保证对象每次返回的结果都要合理，此时就需要控制线程同步了，主要方法有
		①使用synchronized【同步】代码块
		②使用synchronized【同步】来修饰方法
		ps~：同步的逻辑是：加锁-->修改-->释放锁
		具体实例【以银行取钱为例】
		package cn.icbrains.thread;
	/**********************************************创建一个账户类*******************************************/
		/**
		 * Created by icbrains on 2017/8/6.
		 */
		public class Account {
			private String accountNo;
			private double balance;

			public Account() {
			}

			public Account(String accountNo, double balance) {
				this.accountNo = accountNo;
				this.balance = balance;
			}

			public String getAccountNo() {
				return accountNo;
			}

			public void setAccountNo(String accountNo) {
				this.accountNo = accountNo;
			}

			public double getBalance() {
				return balance;
			}

			public void setBalance(double balance) {
				this.balance = balance;
			}

			public synchronized void draw(double drawAmount){
				if (balance>= drawAmount) {
					System.out.println(Thread.currentThread().getName() + "取钱成功! 出钞：" + drawAmount);
					try {
						Thread.sleep(1);
					} catch (InterruptedException e) {
						System.err.println(e.getMessage());
					}

					balance=balance-drawAmount;
					System.out.println("\t 余额为：" + balance);
				} else {
					System.out.println(Thread.currentThread().getName()+"取钱失败！余额不足！");
					System.out.println("余额为！" + balance);
				}
			}
			@Override
			public int hashCode() {
				return accountNo.hashCode();
			}

			@Override
			public boolean equals(Object obj) {
				if (this==obj)
					return true;
				if (obj != null && obj.getClass() == Account.class){
					Account target=(Account)obj;
					return target.getAccountNo().equals(accountNo);
				}
				return false;
			}
		}

	/**********************************************创建一个取钱类*******************************************/		
		package cn.icbrains.thread;

		import org.junit.Test;

		/**
		 * Created by icbrains on 2017/8/6.
		 */
		public class DrawThread extends Thread{
			private Account account;
			private double drawAmount;

			public DrawThread(){

			}
			public DrawThread(String name, Account account,double drawAmount){
				super(name);
				this.account=account;
				this.drawAmount=drawAmount;
			}

			//线程的执行体
			@Override
			public void run() {
				// 同步代码块
		//       synchronized (account) {
		//            if (account.getBalance() >= drawAmount) {
		//                System.out.println(getName() + "取钱成功! 出钞：" + drawAmount);
		//                try {
		//                    Thread.sleep(1);
		//                } catch (InterruptedException e) {
		//                    System.err.println(e.getMessage());
		//                }
		//
		//                account.setBalance(account.getBalance() - drawAmount);
		//                System.out.println("\t 余额为：" + account.getBalance());
		//            } else {
		//                System.out.println(getName()+"取钱失败！余额不足！");
		//                System.out.println("余额为！" + account.getBalance());
		//            }
		//        }
				account.draw(drawAmount);

			}
		}
/**********************************************创建一个测试类*******************************************/
		package cn.icbrains.thread;


		/**
		 * Created by icbrains on 2017/8/6.
		 */
		public class TestThreadMain {

			public static void main(String[] args){
				Account account=new Account("123456",800);
				new DrawThread("甲",account,80).start();
				new DrawThread("乙",account,800).start();
			}
		}
九、

