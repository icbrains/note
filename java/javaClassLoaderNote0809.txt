1、java类加载和反射机制
	1.1、类的加载、连接和初始化
		1.1.1、JVM和类
			java中的jvm之间是不会共享数据的(每启动一次java程序，JVM就会分配一定的内存空间
			所有的数据都共享这一块内存，但是当程序因为某种原因结束之后，内存也就被释放，内
			存中的所有数据将会丢失，当程序再次启动的时候JVM会分配新的内存空间)
		1.1.2、类的加载
			当程序主动使用某个类时，如果该类还未加载到内存中，系统会通过加载、连接、初始化
			三个步骤来对该类进行初始化
			类加载是指将类的class文件读入内存中，并为之创建一个java.lang.CLass对象
			在java中所有的类都是java.lang.Class类的实例
			【使用不同的类加载器，可以从不同的来源加载类的二进制文件，主要为】
			从本地文件系统加载class文件
			从jar包加载class文件
			通过网络加载class文件
			把一个java源文件动态编译，并执行加载
		1.1.3、类的连接
			当类加载完成之后，系统为其生成一个Class对象，接着就会进入连接阶段，连接阶段负责把
			类的二进制文件添加到jre中。
			【连接的三个阶段】
			验证：检查被加载的类是否有正确的内部结构，并与其它类协调一致
			准备：负责为类变量分配内存，并设置默认初始值
			解析：将类的二进制数据中的符号引用替换成直接引用
		1.1.4、类的初始化
			在类的初始化阶段，jvm负责对类进行初始化，主要是对类变量进行初始化
			【jvm初始化一个类的步骤】
			假如一个类没有被加载和连接，程序先加载和连接该类
			假如该类的直接父类没有被初始化，则先初始化父类
			假如该类中没有初始化语句，则系统依次执行这些初始化语句
		1.1.5、类的初始化的时机
			当java程序首次使用某个类或者接口的时候，系统就会初始化该类或接口
			【使用类或接口的6种方式】
			创建类的实例(创建实例包括：使用new关键字创建实例，通过反射来创建实例，通过反射序列化
				的方式是创建实例)
			调用某个类方法
			访问某个类或接口的类变量，或者为该类变量赋值
			使用反射方式强制创建某个类或接口兑现帮的java.lang.Class对象，
			初始化某个类的子类，当初始化一个子类时，它的父类都会被初始化
			直接使用java.exe命令来运行某个主类，当运行这个主类时，程序会先初始化该主类
			【final修饰的类变量的注意】
			当final修饰一个类变量的时候，如果该变量的值在编译的时候就可以确定下来，则这个变量相当于是
			常量(宏变量)，java编译器会把它出现的地方全部替换成它的值，因此程序使用该静态类变量时不会导
			致该类被初始化。但是当该类变量的值需要在运行的时候才会被确定的时候，当程序调用该类变量的时
			候，该类将会被初始化。{Test.finalS=System.currentTimeMillis()}
	1.2、类加载器
		1.2.1、类加载器简介
			在Java中将包名+类名作为一个类的唯一标识符[如：java.lang.Math]，同一个类不能重复被加载
			jvm启动的时候，会形成三个类加载器组成的初始类加载器层次结构
			Bootstrap ClassLoader：根类加载器
			Extensions ClassLoader：扩展类加载器
			System ClassLoader：系统类加载器
		1.2.2、类加载机制
			jvm的类加载机制主要有三种
			全盘负责：当加载一个类时，该类所依赖的其他类也将由该类加载器负责载入，除非显式的使用另一个类加载器来载入
			父类委托：先让父类加载器加载该类，只有父类加载器无法加载该类的时候才尝试从自己的类路径中加载
			缓存机制：保证所有被加载过的类都被缓存，当程序需要某个类的时候先从缓存区中搜索该Class
		1.2.3、创建并使用自定义的类加载器
			jvm中除了根类加载器不是ClassLoader的实例之外，其他的所有的加载器都是ClassLoader子类的实例
			自定义类加载器：继承ClassLoader，重写findClass
			【示例代码】
			package cn.icbrains.reflection;

			import java.io.File;
			import java.io.FileInputStream;
			import java.io.IOException;
			import java.lang.reflect.Method;

			/**
			 * Created by icbrains on 2017/8/10.
			 */
			public class MyClassLoader extends ClassLoader{

				private byte[] getBytes(String filename)throws IOException{
					File file=new File(filename);
					long len=file.length();
					byte[] raw=new byte[(int) len];
					try(FileInputStream inputStream=new FileInputStream(file)) {
						int r=inputStream.read(raw);
						if (r != len)
							throw new IOException("无法加载全部文件："
							+r+" !="+len);

						return raw;

					}
				}

				//编译指定的java文件
				private boolean complie(String javaFile)
					throws IOException{
					System.out.println("MyClassLoader:正在编译"
						+javaFile+"...");
					Process p=Runtime.getRuntime().exec("javac"+javaFile);
					try {
						p.waitFor();
					}catch (InterruptedException ie){
						ie.printStackTrace();
					}
					int ret=p.exitValue();

					return ret==0;
				}

				@Override
				protected Class<?> findClass(String name)
						throws ClassNotFoundException
				{
					Class clazz=null;
					String fileStub=name.replace(".","/");
					String javaFilename=fileStub+".java";
					String classFilename=fileStub+".class";
					File javaFile=new File(javaFilename);
					File classFile=new File(classFilename);

					if (javaFile.exists() && (!classFile.exists() ||
					javaFile.lastModified()>classFile.lastModified())){
						try {
							if (!complie(javaFilename) || !classFile.exists()){
								throw new ClassNotFoundException("ClassNotFoundException"+javaFilename);

							}
						}catch (IOException e){
							e.printStackTrace();
						}
					}

					if (classFile.exists()){
						try {
							byte[] raw=getBytes(classFilename);
							clazz=defineClass(name,raw,0,raw.length);
						}catch (IOException e){
							e.printStackTrace();
						}
					}

					if (clazz == null){
						throw new ClassNotFoundException(name);
					}

					return clazz;

				}

				public static void main(String[] args)throws Exception{
					if (args.length < 1){
						System.out.println("缺少目标类");
						System.out.println("java MyClassLoader ClassName");
					}

					String progClass =args[0];
					String[] proargs=new String[args.length-1];
					System.arraycopy(args,1,proargs,0,proargs.length);

					MyClassLoader myClassLoader=new MyClassLoader();
					Class<?> clazz=myClassLoader.loadClass(progClass);
					Method main=clazz.getMethod("main",(new String[0].getClass()));
					Object argsArray[] ={proargs};
					main.invoke(null,argsArray);
				}
			}
